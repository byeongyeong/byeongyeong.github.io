I"#<p>앱은 앱이 구동되기 위한 기본 구조를 제공하는 시스템 프레임워크 위에서 동작합니다.
앱 개발자는 이 시스템 프레임워크와 상호작용하는 커스텀 코드를 작성함으로써
이벤트에 어떻게 반응할지, 화면을 어떻게 구성할지, 앱 실행 중에 어떤 동작을 실행하게 할지를 결정합니다.
원하는 동작을 효과적으로 구현하기 위해서 iOS 개발자는 iOS 앱의 기본구조와 더불어 앱이 어떻게 실행되고 동작하는지 알아야합니다.<br />
2개에 걸친 포스트를 통해서 해당 내용을 알아보고자 합니다.</p>

<h2 id="uikit-프레임워크">UIKit 프레임워크</h2>
<p>UIKit 프레임워크는 iOS 앱을 개발하기 위해 사용되는 <strong>Cocoa Touch Framework</strong>에 포함된 프레임워크 중 하나입니다.
Cocoa Touch Framework는 iOS의 Layer의 가장 고수준 프레임워크입니다. 
Objective-C 런타임을 기반으로하고 프레임워크 내의 모든 클래스는 NSObject를 상속받습니다.
Swift는 Cocoa Touch Framework와 완벽하게 호환되기 때문에 Objective-C를 모르더라도 Swift로 이 프레임워크를 완벽히 제어할 수 있습니다.</p>

<p><br /></p>
<p align="center">
   <img src="../images/2021-10-30-til-20211030/1.png" width="200" />
</p>
<p><br /></p>

<p>그렇다면 UIKit 프레임워크는 무엇일까요?<br />
이 프레임워크는 이름 그대로 <strong>U(ser) I(nterface)</strong> 앱의 화면과 유저의 인터페이스, 이벤트 대응 및 화면 그리기와 같은 <strong>앱이 동작하는 구조를 정의합니다.</strong>
이 프레임워크에 포함된 클래스들은 <strong>UI</strong> 접두사가 붙으며 모두 NSObject를 상속받게되고 앱이 동작하기 위한 구조내에서 각각의 역할을 수행하게 됩니다.</p>

<p><br /></p>
<p align="center">
   <img src="../images/2021-10-30-til-20211030/2.jpg" width="500" />
</p>
<p><br /></p>

<p>UIKit의 중요한 점은 <strong>iOS 앱이 실행되고 동작하는 대부분의 로직이 UIKit에 의존한다는 점입니다.</strong><br />
따라서 개발자는 UIKit이 제공하는 다양한 API를 사용함으로써
앱의 상태에 어떻게 반응할지, 이벤트에 어떻게 대응할지, 화면을 어떻게 표시할지, 백그라운드에서 어떤 동작을 수행할지 등을 정의할 수 있습니다.</p>

<h2 id="ios-앱의-구조">iOS 앱의 구조</h2>
<p>iOS 앱의 구조는 <strong>MVC &amp; Delegate 패턴</strong>으로 이루어져 있습니다. 이 패턴을 통해서 iOS 앱은 화면, 데이터, 비즈니스 로직(<code class="highlighter-rouge">업무에 필요한 데이터처리를 수행하는 응용프로그램의 일부로, 보이는 것의 뒤에서 일어나는 각종 처리를 의미</code>)으로 나뉘게 됩니다. 이러한 특징때문에 하나의 앱이 서로 다른 디바이스에서도 동일한 동작을 실행할 수 있습니다.</p>

<p><br /></p>
<p align="center">
   <img src="../images/2021-10-30-til-20211030/3.png" width="500" />
</p>
<p><br /></p>

<p>UIApplication object : UIApplication 객체는 event loop(프로그램속에서 반복 사용되는 일련의 명령이 일어나는 것)과 그 밖에 앱의 고차원 행위를 관리 합니다. 또한 앱의 핵심 변동 사항 및 몇몇 특별한 이벤트(예를 들면, incoming push notification와 같은)를 당신이 만든 커스텀 객체인 delegate에 보고를 합니다. UIapplication 객체는 subclassing 하지 않고 있는 그대로 사용하는 것입니다.
APP Delegate object : App delegate는 당신이 작성한 커스텀 코드의 심장입니다. 본 객체는 UIApplication 객체와 앞뒤로 연결되어서, 앱의 시동, 상태변화 및 고차원의 앱 이벤트를 처리합니다. 본 객체는 또한 모든 앱에 오직 하나(one!, 1, uno)만 존재합니다. 그래서 때때로 앱의 초기 데이터 구조를 설정 할 때 사용되기도 합니다.
Document and data model objects : Data model 객체는 앱의 내용을 저장하고, 앱의 구체적인 부분이라고 하겠습니다. 예를 들면, 은행관련 앱은 아마도 금융 거래를 포함하는 데이터베이스를 저장해야 할 텐데, 반면 그림그리기 앱은 이미지 객체 또는 이미지 생성 명령어들을 저장합니다. (후자의 경우, 이미지 객체는 여전히 데이터 객체입니다, 왜냐면 단지 이미지 데이터를 담기 위한 용기일뿐이기 때문입니다.) 앱은 데이터 모델 객체의 일부 또는 전부를 관리하기 위하여 document 객체(UIDocument의 커스텀 서브클래스)를 또한 사용합니다. Document 객체가 필수는 아니지만, 하나의 파일 또는 파일 꾸러미에 소유 될 수 있도록 데이터를 그룹짓기에 편리한 방법을 제공합니다. Document에 대하여 더 많은 정보는 Document-Based App Programming Guide for iOS를 참조 바랍니다.
View controller object : View controller 객체는 앱의 내용물을 스크린에 보여주는 것을 컨트롤 합니다. 하나의 View controller 는 하나의 view와 view의 subview들의 집합을 관리 합니다. view가 보여 질 때는, view controller가 앱의 윈도우에 view를 설치함으로써 view들이 보여질 수 있도록 합니다. UIViewController 클래스는 모든 view controller 객체들에 대한 기초 클래스입니다. 이는 view를 로딩하고, 보여주고, 기기의 회전에 따라 반응하여 화면을 회전시키며, 또한 그 밖에 몇몇 표준 시스템 행위를 하는 등의 기본 기능을 제공합니다. UIKit와 그 밖에 프레임워크는 image picker, tab bar interface 및 navigation interface와 같은 표준 시스템 인터페이스를 실행하기 위하여 별도의 view controller 클래스들을 정의 합니다. view controller에 대한 상세한 사용 방법 등 정보는 View Controller Programming Guide for iOS를 참조 바랍니다.
UIWindow object : 하나의 UIWindow 객체는 스크린에서 하나 또는 여러개의 view를 보여주는 것을 조정합니다. 대부분의 앱은 매인 스크린에 내용물을 보여주는 오직 하나의 윈도우만을 가지지만, 외부 디스플레이 표기되는 내용을 위해 별도의 윈도우를 가지기도 합니다. 앱의 내용을 변경하기 위해서는 해당 윈도우에 표기되는 view를 변경 하기 위하여 view controller를 사용합니다. 윈도우 자체를 절대로 대체할 수는 없습니다. view를 갖는 것에 더하여, 윈도우는 UIApplication 객체와 더불어 이벤트를 view와 view controller에 전달하는 일을 하기도 합니다.
View object, control object, and layer objects : views와 controls은 앱의 내용물에 대한 시각적 표현을 제공합니다. 하나의 view는 지정된 직사각형 공간에서 내용을 그리는 객체이며 또한 그 공간에서 일어나는 이벤트에 응답합니다. controls는 button, text fields 및 toggle switches와 같은 흔한 인터페이스 객체를 실행하는 책임을 가지는 특화된 view의 타입입니다. UIKit 프레임워크는 많은 각기 다른 타입의 내용을 보여주기 위하여 표준 views을 제공합니다. 또한 UIView(또는 UIView의 파생)의 subclassing을 통하여 개발자 의도의 자체 커스텀 views를 직접 정의 할 수도 있습니다.views와 controls를 포함하는것에 더하여, 앱은 view와 control 하이라키에 Core Animation 층들을 포함 할 수도 있습니다. Layer(층) 객체는 사실 시각적인 내용을 나타내는 데이터 객체입니다. views는 내용물을 나타내기 위하여 장면 넘어 집중적으로 layer 객체를 사용합니다. 물론 복잡한 애니메이션 및 그 밖에 정교한 시각적 효과 타입을 실행 하기 위한 인터페이스에 커스텀 layer 객체를 추가 할 수도 있습니다.
하나의 iOS 앱과 다른 앱을 구별 하는 것은 앱이 관리하는 데이터(그리고 해당 business logic)와 데이터를 사용자에게 어떻게 보여주는가 입니다. UIKit 객체를 통한 거의 대부분의 상호작용이 앱을 정의하지는 않지만, 앱의 행위를 세밀히 구분짓는데에 도움을 줍니다. 예를 들면, 앱 delegate의 methods는 개발자의 커스텀 코드가 적절하게 반응 할 수 있도록 앱이 상태 변화를 할 때 이를 개발자에게 알려 줍니다.</p>

<h2 id="앱의-이벤트와-반응-표시">앱의 이벤트와 반응 표시</h2>

<p><br /></p>
<p align="center">
   <img src="../images/2021-10-30-til-20211030/4.jpeg" width="600" />
</p>
<p><br /></p>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://medium.com/@kimyh1981/the-app-life-cycle-3993e7b9b008">https://medium.com/@kimyh1981/the-app-life-cycle-3993e7b9b008</a></li>
</ul>
:ET